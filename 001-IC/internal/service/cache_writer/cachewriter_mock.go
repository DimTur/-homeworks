// Code generated by MockGen. DO NOT EDIT.
// Source: cache_writer.go

// Package cachewriter is a generated GoMock package.
package cachewriter

import (
	reflect "reflect"

	models "github.com/DimTur/multi_user_rw_sys/models"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageCache is a mock of MessageCache interface.
type MockMessageCache struct {
	ctrl     *gomock.Controller
	recorder *MockMessageCacheMockRecorder
}

// MockMessageCacheMockRecorder is the mock recorder for MockMessageCache.
type MockMessageCacheMockRecorder struct {
	mock *MockMessageCache
}

// NewMockMessageCache creates a new mock instance.
func NewMockMessageCache(ctrl *gomock.Controller) *MockMessageCache {
	mock := &MockMessageCache{ctrl: ctrl}
	mock.recorder = &MockMessageCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageCache) EXPECT() *MockMessageCacheMockRecorder {
	return m.recorder
}

// FlushToFiles mocks base method.
func (m *MockMessageCache) FlushToFiles() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FlushToFiles")
}

// FlushToFiles indicates an expected call of FlushToFiles.
func (mr *MockMessageCacheMockRecorder) FlushToFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushToFiles", reflect.TypeOf((*MockMessageCache)(nil).FlushToFiles))
}

// WriteMsgs2Cache mocks base method.
func (m *MockMessageCache) WriteMsgs2Cache(msg models.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteMsgs2Cache", msg)
}

// WriteMsgs2Cache indicates an expected call of WriteMsgs2Cache.
func (mr *MockMessageCacheMockRecorder) WriteMsgs2Cache(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMsgs2Cache", reflect.TypeOf((*MockMessageCache)(nil).WriteMsgs2Cache), msg)
}
